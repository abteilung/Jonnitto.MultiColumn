prototype(Jonnitto.MultiColumn:Content) < prototype(Neos.Fusion:Tag) {
    config = ${Configuration.setting('Jonnitto.MultiColumn')}
    container = ${this.config.container}
    row = ${this.config.row}
    layoutXS = ${q(node).property('layoutXS')}
    layoutSM = ${q(node).property('layoutSM')}
    layoutMD = ${q(node).property('layoutMD')}
    layoutLG = ${q(node).property('layoutLG')}
    layoutXL = ${q(node).property('layoutXL')}
    align = ${q(node).property('align')}
    alignment = ${this.align ? 'align-items-' + this.align : false}

    @context {
        container = ${this.container}
        row = ${this.row}
        layoutXS = ${this.layoutXS}
        layoutSM = ${this.layoutSM}
        layoutMD = ${this.layoutMD}
        layoutLG = ${this.layoutLG}
        layoutXL = ${this.layoutXL}
        alignment = ${this.alignment}
    }

    attributes.class = Neos.Fusion:RawArray {
        nodeType = ${String.toLowerCase(String.pregReplace(q(node).property('_nodeType.name'), '/[[:^alnum:]]/', '-'))}
        container = ${container ? container : row}
        alignment = ${container ? false : alignment}
    }

    content = Jonnitto.MultiColumn:Collection {
        @process.addRow = Neos.Fusion:Tag {
            attributes.class = Neos.Fusion:RawArray {
                row = ${row}
                alignment = ${alignment}
            }
            content = ${value}
            @if.needContainer = ${container ? true : false}
        }
    }

    @process.contentElementWrapping {
        expression = Neos.Neos:ContentElementWrapping
        @position = 'end 999999999'
    }
    @exceptionHandler = 'Neos\\Neos\\Fusion\\ExceptionHandlers\\NodeWrappingHandler'

}
